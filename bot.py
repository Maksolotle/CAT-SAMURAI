import asyncio
import config
import logging
import sys
import random
from datetime import datetime

from aiogram import Bot, Dispatcher, executor, types

from filters import IsAdminFilter

sys.path.append("./censure")
from censure import Censor

censor_ru = Censor.get(lang="ru") # censor

def check_for_profanity(text):
    line_info = censor_ru.clean_line(text)
     

    _word = line_info[0][3] if line_info[1] else line_info[4][0] if line_info[2] else None

    return not _word is None, _word, line_info



logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)
dp.filters_factory.bind(IsAdminFilter)

async def report_reminder():
    await asyncio.sleep(1) 
    while True:
        try:
            await bot.send_message(
            config.LOG_ID,
                "<b>‚ùï –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É !report</b> \n \n –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä–æ–π –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ. \n \n –°–ø–∞–º –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π –∫–∞—Ä–∞–µ—Ç—Å—è –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–º –±–∞–Ω–æ–º.",
                parse_mode="HTML"
            )
            print("Message about !report sended")
        except Exception as e:
            print(f"Error by sending message {e}")
        await asyncio.sleep(14400) # 4 hours

async def start_reminder():
    await asyncio.sleep(1) 
    while True:
        try:
            await bot.send_message(
            config.LOG_ID,
                "<b>Working Log</b> \n \n Every 10 minutes.",
                parse_mode="HTML"
            )
            print("Message 'Every 10 minutes.' sended")
        except Exception as e:
            print(f"Error by sending message {e}")
        await asyncio.sleep(600) # 10 minutes

@dp.message_handler(commands=["–±—É"], commands_prefix="!/")
async def cmd_boo(message: types.Message):
    responses = [
        "–õ—É—á—à–µ –ø—Ä–∏–Ω–µ—Å–∏ –º–Ω–µ –ø–∏–≤–∫–∞",
        "–û–ø—è—Ç—å –º–µ—à–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!",
        "–ù—É –∏ –∑–∞—á–µ–º —Ç—ã —ç—Ç–æ —Å–∫–∞–∑–∞–ª?üò§",
        "–¢–∞–∫ –∏ –¥–æ –∏–Ω—Ñ–∞—Ä–∫—Ç–∞ –º–æ–∂–Ω–æ –¥–æ–≤–µ—Å—Ç–∏!"
    ]

    reply = random.choice(responses)
    await message.reply(reply)
		
@dp.message_handler(chat_id=config.GROUP_ID, is_admin=True, commands=["ban"], commands_prefix="!/")
async def cmd_ban(message: types.Message):
	if not message.reply_to_message:
		await message.rseply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
		return
	
	await message.bot.kick_chat_member(chat_id=config.GROUP_ID, user_id=message.reply_to_message.from_user.id)

	await message.answer("–£—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

@dp.message_handler(commands=["report"], commands_prefix="!/")
async def cmd_report(message: types.Message):
    user_reports = [
        "–©—è –∫—Ç–æ-—Ç–æ —á–µ–∫–Ω–µ—Ç :3",
        "–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ",
        "üöî –°–ª—É–∂–±–∞ Telegram —É–∂–µ –≤ –ø—É—Ç–∏!"
    ]	

    admin_reports = [
         "–¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Ä–µ–ø–æ—Ä—Ç–Ω—É–ª –ê–î–ú–ò–ù–ê. –£–¥–∞—á–∏.",
         "–•–æ—á–µ—à—å –±–∞–Ω? –¢–∞–∫ –∏ –∑–∞–ø–∏—à–µ–º... üìù",
         "–†–µ–ø–æ—Ä—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –ê —Ç—ã —Å–º–µ–ª—ã–π!",
         "–ê–¥–º–∏–Ω–æ–≤ —Ä–µ–ø–æ—Ä—Ç–∏—à—å? –ê–π-–∞–π-–∞–π üòà",
         "–ú—ã, –∫–æ–Ω–µ—á–Ω–æ, –ø–µ—Ä–µ–¥–∞–¥–∏–º... –Ω–æ –Ω–µ –æ–±–µ—â–∞–µ–º, —á—Ç–æ –≤—ã–∂–∏–≤–µ—à—å."
    ]
    
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return

    current_time = datetime.now().strftime("%d.%m.%Y %H:%M")

    reported_user = message.reply_to_message.from_user
    responses = user_reports

    try:
        chat_member = await message.bot.get_chat_member(message.chat.id, reported_user.id)
        if chat_member.status in ['administrator', 'creator']:
            responses = admin_reports
    except Exception as e:
        print(f"Error retrieving user data")

    reply = random.choice(responses)
    await message.reply(reply)

    log_message = (
        f"<b>[REPORT]</b>\n"
        f"üïí <b>Time:</b> {current_time}\n"		
    )

    await bot.send_message(config.LOG_ID, log_message, parse_mode="HTML")

    return

# filter
@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_message(message: types.Message):
    comment = message.text
    check_result = check_for_profanity(comment)

    responses = [
        "–©–∞—Å –∫–æ–º—É-—Ç–æ —è–∑—ã–∫ —Å –º—ã–ª–æ–º –ø–æ–º–æ—é!",
        "–í –Ω–∞—à–µ –≤—Ä–µ–º—è —Ç–∞–∫ –Ω–µ –≤—ã—Ä–∞–∂–∞–ª–∏—Å—å.",
        "–ß—Ç–æ –∑–∞ –ø–æ–∫–æ–ª–µ–Ω–∏–µ, –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤ –Ω–µ –∑–Ω–∞–µ—à—å?",
    ]

    if check_result[0]:
        reply = random.choice(responses)
        await message.reply(reply)
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M")

        log_message = (
            f"<b>[LOG]</b>\n"
            f"üïí <b>Time:</b> {current_time}\n"
            f"üë§ <b>User:</b> {message.from_user.full_name} (@{message.from_user.username})\n"
            f"üí¨ <b>Text:</b> \"{comment}\"\n"
			f"<b>RESULT:</b> Message deleted."
			
        )

        await bot.send_message(config.LOG_ID, log_message, parse_mode="HTML")
        await message.delete()

async def on_startup(dispatcher):
    asyncio.create_task(report_reminder())
    asyncio.create_task(start_reminder())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)